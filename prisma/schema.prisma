// PHẦN 1: SCHEMA.PRISMA
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma" // Sử dụng relationMode để quản lý quan hệ N-N
}

generator client {
  provider = "prisma-client-js"
}

// --- BẮT ĐẦU SCHEMA (Đã được tối ưu dựa trên Giai đoạn 1) ---

/// Model User chỉ dùng cho việc đăng nhập Admin.
/// Model này được bảo vệ nghiêm ngặt nhất.
model User {
  id             String  @id @default(cuid())
  email          String  @unique // Chỉ mục unique cho việc đăng nhập
  hashedPassword String
  
  // Quan hệ 1-1 với Profile
  profile        Profile?
}

/// Model Profile chứa thông tin công khai của CV.
/// Dữ liệu này sẽ được render tĩnh.
model Profile {
  id           String @id @default(cuid())
  fullName     String
  title        String // Ví dụ: "Senior Software Engineer"
  summary      String @db.Text
  avatarUrl    String?
  contactEmail String
  linkedinUrl  String?
  githubUrl    String?
  
  // Quan hệ 1-1 với User
  user         User   @relation(fields: [userId], references: [id])
  userId       String @unique // Đảm bảo 1 user chỉ có 1 profile
  
  // Quan hệ 1-N
  experiences Experience[]
  projects    Project[]
  
  // Quan hệ N-N với Skill
  skills      Skill[]
}

/// Kinh nghiệm làm việc
model Experience {
  id          String   @id @default(cuid())
  company     String
  role        String
  startDate   DateTime
  endDate     DateTime? // Có thể null nếu vẫn đang làm
  description String   @db.Text
  
  // Quan hệ N-1 với Profile
  profile     Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String
  
  @@index([profileId]) // Tối ưu query khi lấy tất cả
}

/// Dự án cá nhân
model Project {
  id          String  @id @default(cuid())
  name        String
  description String  @db.Text
  imageUrl    String?
  projectUrl  String? // Link demo
  repoUrl     String? // Link Github
  
  // Quan hệ N-1 với Profile
  profile     Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String
  
  // Quan hệ N-N với Skill
  skills      Skill[]
  
  @@index([profileId]) // Tối ưu query khi lấy tất cả
}

/// Bảng Kỹ năng (Skill)
/// Quyết định 3: Dùng bảng riêng để quản lý
model Skill {
  id       String @id @default(cuid())
  name     String @unique // Tên kỹ năng phải là duy nhất
  category String // Ví dụ: "Frontend", "Backend", "Database"
  
  // Quan hệ N-N
  profiles Profile[]
  projects Project[]
  
  @@index([category]) // Tối ưu query khi lọc theo danh mục
}